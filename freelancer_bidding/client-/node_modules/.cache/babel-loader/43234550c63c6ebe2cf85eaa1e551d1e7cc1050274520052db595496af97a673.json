{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7ba5bd90\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-messages\",\n  ref: \"chatMessages\"\n};\nconst _hoisted_3 = {\n  class: \"chat-input\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"message\", {\n        'user-message': message.isUser\n      }])\n    }, _toDisplayString(message.text), 3 /* TEXT, CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userInput = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"Type your message...\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"Send\")])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","messages","message","index","key","_normalizeClass","isUser","text","_hoisted_3","type","_cache","$event","userInput","onKeyup","_withKeys","args","$options","sendMessage","placeholder","onClick"],"sources":["/home/waseem/project/chatbot/client-/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <div class=\"chat-messages\" ref=\"chatMessages\">\n      <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"message\" :class=\"{ 'user-message': message.isUser }\">\n        {{ message.text }}\n      </div>\n    </div>\n    <div class=\"chat-input\">\n      <input type=\"text\" v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"Type your message...\" />\n      <button @click=\"sendMessage\">Send</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      userInput: '',\n      messages: [\n        { text: 'Welcome to the chatbot!', isUser: false }\n      ]\n    };\n  },\n  methods: {\n    sendMessage() {\n      if (this.userInput.trim() !== '') {\n        this.messages.push({ text: this.userInput, isUser: true });\n        // Here you would typically send the user input to your backend for processing\n        // and receive a response that you would then append to the messages array.\n        this.userInput = ''; // Clear the input field after sending message\n        this.$nextTick(() => {\n          this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight; // Auto scroll to bottom\n        });\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  overflow: hidden;\n}\n\n.chat-messages {\n  max-height: 300px;\n  overflow-y: auto;\n  padding: 10px;\n}\n\n.message {\n  margin-bottom: 10px;\n  padding: 5px 10px;\n  border-radius: 5px;\n}\n\n.user-message {\n  background-color: #f0f0f0;\n}\n\n.chat-input {\n  display: flex;\n  padding: 10px;\n}\n\n.chat-input input {\n  flex: 1;\n  padding: 5px;\n  border-radius: 3px;\n  border: 1px solid #ccc;\n}\n\n.chat-input button {\n  padding: 5px 10px;\n  margin-left: 5px;\n  border-radius: 3px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;EAK1BD,KAAK,EAAC;AAAY;;uBANzBE,mBAAA,CAUM,OAVNC,UAUM,GATJC,mBAAA,CAIM,OAJNC,UAIM,I,kBAHJH,mBAAA,CAEMI,SAAA,QALZC,WAAA,CAGsCC,KAAA,CAAAC,QAAQ,EAH9C,CAGmBC,OAAO,EAAEC,KAAK;yBAA3BT,mBAAA,CAEM;MAFqCU,GAAG,EAAED,KAAK;MAAEX,KAAK,EAHlEa,eAAA,EAGmE,SAAS;QAAA,gBAA2BH,OAAO,CAACI;MAAM;wBAC1GJ,OAAO,CAACK,IAAI;0DAGnBX,mBAAA,CAGM,OAHNY,UAGM,G,gBAFJZ,mBAAA,CAAuG;IAAhGa,IAAI,EAAC,MAAM;IARxB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAQkCX,KAAA,CAAAY,SAAS,GAAAD,MAAA;IAAGE,OAAK,EAAAH,MAAA,QAAAA,MAAA,MARnDI,SAAA,KAAAC,IAAA,KAQ2DC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAEG,WAAW,EAAC;iEAAlDlB,KAAA,CAAAY,SAAS,E,GACrChB,mBAAA,CAA0C;IAAjCuB,OAAK,EAAAT,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,MAAI,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}