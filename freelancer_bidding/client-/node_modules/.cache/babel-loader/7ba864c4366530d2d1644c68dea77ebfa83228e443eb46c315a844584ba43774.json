{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, vModelSelect as _vModelSelect, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"chat-heading\"\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"CHAT TESTER\")], -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"input-section\"\n};\nconst _hoisted_4 = {\n  class: \"test-case-selection\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"test-case-type\"\n}, \"Test Case Type:\", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"Type A\"\n}, \"Type A\", -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"Type B\"\n}, \"Type B\", -1 /* HOISTED */);\nconst _hoisted_8 = {\n  class: \"error-classification\"\n};\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"error-type\"\n}, \"Error Classification:\", -1 /* HOISTED */);\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"Syntax Error\"\n}, \"Syntax Error\", -1 /* HOISTED */);\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"Runtime Error\"\n}, \"Runtime Error\", -1 /* HOISTED */);\nconst _hoisted_12 = {\n  class: \"generate-section\"\n};\nconst _hoisted_13 = {\n  key: 0,\n  class: \"result-section\"\n};\nconst _hoisted_14 = {\n  key: 0,\n  class: \"generated-content-box\"\n};\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"OUTPUT\", -1 /* HOISTED */);\nconst _hoisted_16 = {\n  key: 1,\n  class: \"error-section\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.textInput = $event),\n    placeholder: \"Enter text\",\n    class: \"input-textarea\",\n    rows: \"5\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.textInput]])]), _createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.testCaseType = $event),\n    id: \"test-case-type\"\n  }, [_hoisted_6, _hoisted_7, _createCommentVNode(\" Add more options as needed \")], 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.testCaseType]])]), _createElementVNode(\"div\", _hoisted_8, [_hoisted_9, _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.errorType = $event),\n    id: \"error-type\"\n  }, [_hoisted_10, _hoisted_11, _createCommentVNode(\" Add more options as needed \")], 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.errorType]])]), _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.generateContent && _ctx.generateContent(...args)),\n    class: \"generate-button\"\n  }, \"Generate\")]), _ctx.generatedContent || _ctx.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_ctx.generatedContent ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [_hoisted_15, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.generatedContent, (point, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createElementVNode(\"span\", {\n      class: _normalizeClass({\n        'bigger-font': point.startsWith('*')\n      })\n    }, _toDisplayString(point), 3 /* TEXT, CLASS */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _ctx.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_createElementVNode(\"p\", null, \"Error: \" + _toDisplayString(_ctx.errorMessage), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","value","key","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_cache","$event","_ctx","textInput","placeholder","rows","_hoisted_4","_hoisted_5","testCaseType","id","_hoisted_6","_hoisted_7","_createCommentVNode","_hoisted_8","_hoisted_9","errorType","_hoisted_10","_hoisted_11","_hoisted_12","onClick","args","generateContent","generatedContent","errorMessage","_hoisted_13","_hoisted_14","_hoisted_15","_Fragment","_renderList","point","index","_normalizeClass","startsWith","_hoisted_16","_toDisplayString"],"sources":["/home/waseem/project/chatbot/client-/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"chat-heading\">\n      <h2>CHAT TESTER</h2>\n    </div>\n\n    <div class=\"input-section\">\n      <textarea v-model=\"textInput\" placeholder=\"Enter text\" class=\"input-textarea\" rows=\"5\"></textarea>\n    </div>\n\n    <div class=\"test-case-selection\">\n      <label for=\"test-case-type\">Test Case Type:</label>\n      <select v-model=\"testCaseType\" id=\"test-case-type\">\n        <option value=\"Type A\">Type A</option>\n        <option value=\"Type B\">Type B</option>\n        <!-- Add more options as needed -->\n      </select>\n    </div>\n\n    <div class=\"error-classification\">\n      <label for=\"error-type\">Error Classification:</label>\n      <select v-model=\"errorType\" id=\"error-type\">\n        <option value=\"Syntax Error\">Syntax Error</option>\n        <option value=\"Runtime Error\">Runtime Error</option>\n        <!-- Add more options as needed -->\n      </select>\n    </div>\n\n    <div class=\"generate-section\">\n      <button @click=\"generateContent\" class=\"generate-button\">Generate</button>\n    </div>\n\n    <div v-if=\"generatedContent || errorMessage\" class=\"result-section\">\n      <div class=\"generated-content-box\" v-if=\"generatedContent\">\n        <h3>OUTPUT</h3>\n        <ul>\n          <li v-for=\"(point, index) in generatedContent\" :key=\"index\">\n            <span :class=\"{ 'bigger-font': point.startsWith('*') }\">{{ point }}</span>\n          </li>\n        </ul>\n      </div>\n      <div v-if=\"errorMessage\" class=\"error-section\">\n        <p>Error: {{ errorMessage }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport marked from 'marked';\n\nexport default {\n  data() {\n    return {\n      textInput: \"\",\n      generatedContent: [],\n      errorMessage: \"\",\n      testCaseType: \"\",\n      errorType: \"\"\n    };\n  },\n  methods: {\n    async generateContent() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/generate_content', {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ \n            text: this.textInput,\n            testCaseType: this.testCaseType,\n            errorType: this.errorType\n          })\n        });\n        computed: {\n    compiledMarkdown() {\n      return marked(this.markdownContent);\n    },\n  },\n        const responseData = await response.json();\n\n        if (response.ok) {\n          this.generatedContent = responseData.generated_content.split('\\n');\n          this.errorMessage = \"\";\n        } else {\n          this.generatedContent = [];\n          this.errorMessage = responseData.message || \"Failed to generate content.\";\n        }\n      } catch (error) {\n        console.error(\"Error generating content:\", error);\n        this.generatedContent = [];\n        this.errorMessage = \"An error occurred while generating content.\";\n      }\n    }\n  }\n};\n</script>\n\n<style>\n.container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  font-family: sans-serif;\n  background-color:whitesmoke; /* Changed background color to light grey */\n  padding: 2rem;\n}\n\n.chat-heading {\n  margin-top: 20px;\n  text-align: center;\n}\n\nh2 {\n  font-size: 28px;\n  color: #449D44;\n}\n\n.input-section,\n.test-case-selection,\n.error-classification,\n.generate-section {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n}\n\n.input-textarea {\n  flex: 1;\n  width: 1500px;\n  min-height: 100px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  resize: horizontal;\n  margin-right: 10px;\n}\n\n.test-case-selection label,\n.error-classification label {\n  margin-bottom: 5px; /* Adjusted for better spacing */\n}\n\n.test-case-selection select,\n.error-classification select {\n  width: 600px;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\n.generate-button {\n  margin-top: 10px; /* Adjusted for better spacing */\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.generate-button:hover {\n  background-color: #0056b3;\n}\n\n.result-section,\n.error-section {\n  text-align: center;\n  max-width: 80%;\n  margin-bottom: 20px;\n}\n\n.generated-content-box {\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n  width: 1500px; /* Same width as input textarea */\n  max-width: 100%;\n  min-height: 100%;\n  margin: 20px auto; /* Center horizontally and vertically */\n  text-align: left; /* Align text to start from the left */\n}\n\n.bold {\n  font-weight: bo;\n}\n\np {\n  font-size: 18px;\n  color: #333;\n}\n\n.bigger-font{\n  font-size: 20px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}