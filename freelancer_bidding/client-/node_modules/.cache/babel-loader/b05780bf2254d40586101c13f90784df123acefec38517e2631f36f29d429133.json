{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      query: '',\n      searchLimit: '',\n      projects: [],\n      selectedProjects: [],\n      loading: false,\n      backendUrl: 'http://127.0.0.1:5000',\n      preview: null,\n      projectHeaders: ['id', 'title', 'seo_url', 'submitdate', 'budget_minimum', 'budget_maximum', 'currency_code', 'currency_exchange_rate', 'bid_stats_bid_count', 'bid_stats_bid_avg', 'budget_maximum_usd', 'budget_minimum_usd', 'description'],\n      showModal: false,\n      modalDescription: ''\n    };\n  },\n  methods: {\n    async fetchProjects() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${this.backendUrl}/search_projects`, {\n          params: {\n            query: this.query\n          }\n        });\n        this.projects = response.data;\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    openModal(description) {\n      this.showModal = true;\n      this.modalDescription = description;\n    },\n    closeModal() {\n      this.showModal = false;\n      this.modalDescription = '';\n    },\n    async generateProposal(projectId) {\n      try {\n        const response = await axios.get(`${this.backendUrl}/generate_proposal`, {\n          params: {\n            id: projectId\n          }\n        });\n        return response.data ? response.data : 'No proposal available';\n      } catch (error) {\n        console.error('Error generating proposal:', error);\n        return 'Error generating proposal';\n      }\n    },\n    async previewBid() {\n      if (this.selectedProjects.length === 0) {\n        this.preview = [];\n        return;\n      }\n      this.preview = [];\n      for (const projectId of this.selectedProjects) {\n        const project = this.projects.find(p => p.id === projectId);\n        const proposal = await this.generateProposal(projectId);\n        const previewItem = {};\n        this.projectHeaders.forEach(header => {\n          previewItem[header] = project[header] || 'Not available';\n        });\n        previewItem.bidAmount = ''; // Initialize bid amount property\n        previewItem.proposal = proposal;\n        this.preview.push(previewItem);\n      }\n    },\n    submitBid() {\n      console.log('Submitting bids:', this.selectedProjects);\n      // You can add logic here to send bid details to the backend\n      this.createBid();\n    },\n    confirmBid() {\n      // Logic for confirming bid\n      this.createBid();\n    },\n    createBid() {\n      // Example of how to send a POST request to create a bid\n      const bidData = {\n        projects: this.selectedProjects,\n        bids: this.preview.map(item => ({\n          id: item.id,\n          bidAmount: item.bidAmount\n        }))\n      };\n      axios.post(`${this.backendUrl}/create_bid`, bidData).then(response => {\n        console.log('Bid created successfully:', response.data);\n        // Optionally, you can reset the selectedProjects and preview arrays after successful bid creation\n        this.selectedProjects = [];\n        this.preview = null;\n      }).catch(error => {\n        console.error('Error creating bid:', error);\n      });\n    },\n    formatDate(timestamp) {\n      // Create a new Date object with the timestamp (in milliseconds)\n      const date = new Date(timestamp);\n      // Format the date to a human-readable format\n      return date.toLocaleString();\n    }\n  },\n  computed: {\n    // Compute rounded values for budget_minimum_usd and budget_maximum_usd\n    roundedProjects() {\n      return this.projects.map(project => ({\n        ...project,\n        budget_minimum_usd: parseFloat(project.budget_minimum_usd).toFixed(0),\n        // Round to 2 decimal places\n        budget_maximum_usd: parseFloat(project.budget_maximum_usd).toFixed(0),\n        // Round to 2 decimal places\n        submitdate: this.formatDate(project.submitdate) // Convert Unix timestamp to human-readable date\n      }));\n    }\n  }\n};","map":{"version":3,"names":["axios","data","query","searchLimit","projects","selectedProjects","loading","backendUrl","preview","projectHeaders","showModal","modalDescription","methods","fetchProjects","response","get","params","error","console","openModal","description","closeModal","generateProposal","projectId","id","previewBid","length","project","find","p","proposal","previewItem","forEach","header","bidAmount","push","submitBid","log","createBid","confirmBid","bidData","bids","map","item","post","then","catch","formatDate","timestamp","date","Date","toLocaleString","computed","roundedProjects","budget_minimum_usd","parseFloat","toFixed","budget_maximum_usd","submitdate"],"sources":["/home/waseem/project/freelancer_bidding_automation/client-/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>FREELANCER AUTO BIDDING</h1>\n\n    <div>\n      <label for=\"query\">Query:</label>\n      <input v-model=\"query\" type=\"text\" id=\"query\" />\n      <button @click=\"fetchProjects\" :disabled=\"loading\">Search</button>\n\n      <div v-if=\"loading\" class=\"spinner-container\">\n        <div class=\"spinner\"></div>\n      </div>\n    </div>\n\n    <div v-if=\"!loading && roundedProjects.length > 0\">\n      <table>\n        <!-- Table headers -->\n        <thead>\n          <tr>\n            <th>Select</th>\n            <th v-for=\"header in projectHeaders\" :key=\"header\">{{ header }}</th>\n          </tr>\n        </thead>\n        <!-- Table body -->\n        <tbody>\n          <tr v-for=\"project in roundedProjects\" :key=\"project.id\">\n            <!-- Checkbox for selection -->\n            <td>\n              <input type=\"checkbox\" v-model=\"selectedProjects\" :value=\"project.id\" />\n            </td>\n            <!-- Display project data -->\n            <td v-for=\"header in projectHeaders\" :key=\"header\">\n              <template v-if=\"header !== 'description'\">\n                <!-- Check if header is budget_minimum_usd or budget_maximum_usd -->\n                <template v-if=\"header === 'budget_minimum_usd' || header === 'budget_maximum_usd'\">\n                  ${{ project[header] || 'Not available' }}\n                </template>\n                <!-- If header is not budget_minimum_usd or budget_maximum_usd -->\n                <template v-else-if=\"header === 'submitdate'\">\n                  {{ formatDate(project[header]) || 'Not available' }}\n                </template>\n                <template v-else>\n                  {{ project[header] || 'Not available' }}\n                </template>\n              </template>\n              <template v-else>\n                <button @click=\"openModal(project.description)\">View Description</button>\n              </template>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <!-- Buttons for preview and submit -->\n      <div>\n        <button @click=\"previewBid\" :disabled=\"selectedProjects.length === 0\">Preview</button>\n        <button @click=\"submitBid\" :disabled=\"selectedProjects.length === 0 || !preview\">Submit</button>\n      </div>\n\n      <!-- Modal window for project description -->\n      <div v-if=\"showModal\" class=\"modal\">\n        <div class=\"modal-content\">\n          <span class=\"close\" @click=\"closeModal\">&times;</span>\n          <p>{{ modalDescription }}</p>\n        </div>\n      </div>\n\n      <!-- Display Preview -->\n      <div v-if=\"preview\" class=\"preview-container\">\n        <h2>Preview:</h2>\n        <table v-if=\"selectedProjects.length > 0\">\n          <thead>\n            <tr>\n              <th v-for=\"(header, index) in projectHeaders\" :key=\"index\">{{ header }}</th>\n              <th>Proposal</th>\n              <th>Bid Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(item, index) in preview\" :key=\"index\">\n              <td v-for=\"(value, key) in item\" :key=\"key\">\n                {{ value || 'Not available' }}\n              </td>\n              <td>{{ item.proposal || 'No proposal available' }}</td>\n              <td><input type=\"number\" v-model=\"item.bidAmount\" placeholder=\"Enter bid amount\"></td>\n            </tr>\n          </tbody>\n        </table>\n        <p v-else>No projects selected for preview.</p>\n        <button @click=\"confirmBid\">Confirm</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      query: '',\n      searchLimit: '',\n      projects: [],\n      selectedProjects: [],\n      loading: false,\n      backendUrl: 'http://127.0.0.1:5000',\n      preview: null,\n      projectHeaders: [\n        'id',\n        'title',\n        'seo_url',\n        'submitdate',\n        'budget_minimum',\n        'budget_maximum',\n        'currency_code',\n        'currency_exchange_rate',\n        'bid_stats_bid_count',\n        'bid_stats_bid_avg',\n        'budget_maximum_usd',\n        'budget_minimum_usd',\n        'description'\n      ],\n      showModal: false,\n      modalDescription: ''\n    };\n  },\n  methods: {\n    async fetchProjects() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${this.backendUrl}/search_projects`, {\n          params: {\n            query: this.query,\n          },\n        });\n\n        this.projects = response.data;\n\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    openModal(description) {\n      this.showModal = true;\n      this.modalDescription = description;\n    },\n    closeModal() {\n      this.showModal = false;\n      this.modalDescription = '';\n    },\n    async generateProposal(projectId) {\n      try {\n        const response = await axios.get(`${this.backendUrl}/generate_proposal`, {\n          params: {\n            id: projectId,\n          },\n        });\n        return response.data ? response.data : 'No proposal available';\n      } catch (error) {\n        console.error('Error generating proposal:', error);\n        return 'Error generating proposal';\n      }\n    },\n    async previewBid() {\n      if (this.selectedProjects.length === 0) {\n        this.preview = [];\n        return;\n      }\n\n      this.preview = [];\n\n      for (const projectId of this.selectedProjects) {\n        const project = this.projects.find((p) => p.id === projectId);\n        const proposal = await this.generateProposal(projectId);\n\n        const previewItem = {};\n\n        this.projectHeaders.forEach((header) => {\n          previewItem[header] = project[header] || 'Not available';\n        });\n\n        previewItem.bidAmount = ''; // Initialize bid amount property\n        previewItem.proposal = proposal;\n\n        this.preview.push(previewItem);\n      }\n    },\n    submitBid() {\n      console.log('Submitting bids:', this.selectedProjects);\n      // You can add logic here to send bid details to the backend\n      this.createBid();\n    },\n    confirmBid() {\n      // Logic for confirming bid\n      this.createBid();\n    },\n    createBid() {\n      // Example of how to send a POST request to create a bid\n      const bidData = {\n        projects: this.selectedProjects,\n        bids: this.preview.map(item => ({ id: item.id, bidAmount: item.bidAmount }))\n      };\n\n      axios.post(`${this.backendUrl}/create_bid`, bidData)\n        .then(response => {\n          console.log('Bid created successfully:', response.data);\n          // Optionally, you can reset the selectedProjects and preview arrays after successful bid creation\n          this.selectedProjects = [];\n          this.preview = null;\n        })\n        .catch(error => {\n          console.error('Error creating bid:', error);\n        });\n    },\n    formatDate(timestamp) {\n      // Create a new Date object with the timestamp (in milliseconds)\n      const date = new Date(timestamp);\n      // Format the date to a human-readable format\n      return date.toLocaleString();\n    },\n  },\n  computed: {\n    // Compute rounded values for budget_minimum_usd and budget_maximum_usd\n    roundedProjects() {\n      return this.projects.map(project => ({\n        ...project,\n        budget_minimum_usd: parseFloat(project.budget_minimum_usd).toFixed(0), // Round to 2 decimal places\n        budget_maximum_usd: parseFloat(project.budget_maximum_usd).toFixed(0), // Round to 2 decimal places\n        submitdate: this.formatDate(project.submitdate), // Convert Unix timestamp to human-readable date\n      }));\n    },\n  },\n};\n</script>\n\n<style scoped>\n  /* Spinner container style */\n.spinner-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Spinner style */\n.spinner {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-left-color: #3498db; /* Blue */\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Container style */\ndiv {\n  font-family: 'Arial', sans-serif;\n  margin: 20px;\n  text-align: center;\n}\n\n/* Preview container style */\n.preview-container {\n  border: 1px solid #ddd;\n  padding: 10px;\n  margin-top: 20px;\n}\n\nh1 {\n  color: #4CAF50;\n}\n\n/* Input and button style */\nlabel,\ninput,\nbutton {\n  margin: 5px;\n}\n\n/* Table style */\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\nth,\ntd {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\nth {\n  background-color: #f2f2f2;\n}\n\n/* Checkbox and bid amount input style */\ninput[type=\"checkbox\"],\ninput[type=\"number\"] {\n  margin: 0;\n}\n\n/* Button container style */\ndiv > div {\n  margin-top: 10px;\n}\n\n/* Preview and Submit button style */\nbutton {\n  padding: 10px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\n/* Modal style */\n.modal {\n  display: block;\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n\n.close {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}