{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      query: '',\n      searchLimit: '',\n      projects: [],\n      selectedProjects: [],\n      bidAmounts: {},\n      loading: false,\n      // Add loading state\n      backendUrl: 'http://127.0.0.1:5000',\n      preview: null,\n      projectHeaders: ['id', 'title', 'seo_url', 'submitdate', 'budget_minimum', 'budget_maximum', 'currency_code', 'currency_exchange_rate', 'bid_stats_bid_count', 'bid_stats_bid_avg', 'budget_maximum_usd', 'budget_minimum_usd', 'description', 'proposal']\n    };\n  },\n  methods: {\n    async fetchProjects() {\n      try {\n        this.loading = true; // Set loading state to true\n        const response = await axios.get(`${this.backendUrl}/search_projects`, {\n          params: {\n            query: this.query\n          }\n        });\n        this.projects = response.data;\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        this.loading = false; // Set loading state to false\n      }\n    },\n    previewBid() {\n      if (this.selectedProjects.length === 0) {\n        this.preview = 'No projects selected.';\n        return;\n      }\n      this.preview = {};\n      this.selectedProjects.forEach(projectId => {\n        const project = this.projects.find(p => p.id === projectId);\n        const bidAmount = this.bidAmounts[projectId] || 'Not specified';\n        this.projectHeaders.forEach(header => {\n          this.preview[header] = project[header] || 'Not available';\n        });\n        this.preview.bidAmount = bidAmount;\n      });\n    },\n    submitBid() {\n      console.log('Submitting bids:', this.selectedProjects, this.bidAmounts);\n\n      // You can add logic here to send bid details to the backend\n    }\n  }\n};","map":{"version":3,"names":["axios","data","query","searchLimit","projects","selectedProjects","bidAmounts","loading","backendUrl","preview","projectHeaders","methods","fetchProjects","response","get","params","error","console","previewBid","length","forEach","projectId","project","find","p","id","bidAmount","header","submitBid","log"],"sources":["/home/waseem/project/freelancer_bidding_automation/client-/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>FREELANCER AUTO BIDDING</h1>\n\n    <div>\n      <label for=\"query\">Query:</label>\n      <input v-model=\"query\" type=\"text\" id=\"query\" />\n      <!-- <label for=\"searchLimit\">Search Limit:</label> -->\n      <!-- <input v-model.number=\"searchLimit\" type=\"number\" id=\"searchLimit\" /> -->\n      <button @click=\"fetchProjects\" :disabled=\"loading\">Search</button>\n\n      <div v-if=\"loading\" class=\"spinner-container\">\n        <div class=\"spinner\"></div>\n      </div>\n    </div>\n\n    <div v-if=\"!loading && projects.length > 0\">\n      <table>\n        <!-- Table headers -->\n        <thead>\n          <tr>\n            <th>Select</th>\n            <th v-for=\"header in projectHeaders\" :key=\"header\">{{ header }}</th>\n            <th>Bid Amount</th>\n          </tr>\n        </thead>\n        <!-- Table body -->\n        <tbody>\n          <tr v-for=\"project in projects\" :key=\"project.id\">\n            <!-- Checkbox for selection -->\n            <td>\n              <input type=\"checkbox\" v-model=\"selectedProjects\" :value=\"project.id\" />\n            </td>\n            <!-- Display project data -->\n            <td v-for=\"header in projectHeaders\" :key=\"header\">\n              {{ project[header] || 'Not available' }}\n            </td>\n            <!-- Input for bid amount -->\n            <td>\n              <input v-model=\"bidAmounts[project.id]\" type=\"number\" />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <!-- Buttons for preview and submit -->\n      <div>\n        <button @click=\"previewBid\">Preview</button>\n        <button @click=\"submitBid\">Submit</button>\n      </div>\n\n      <!-- Display Preview -->\n      <div v-if=\"preview\" class=\"preview-container\">\n        <h2>Preview:</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Key</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(value, key) in preview\" :key=\"key\">\n              <td>{{ key }}</td>\n              <td>{{ value || 'Not available' }}</td>\n            </tr>\n          </tbody>\n        </table>\n        <!-- Confirmation button -->\n        <button @click=\"confirmBid\">Confirm</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      query: '',\n      searchLimit: '',\n      projects: [],\n      selectedProjects: [],\n      bidAmounts: {},\n      loading: false, // Add loading state\n      backendUrl: 'http://127.0.0.1:5000',\n      preview: null,\n      projectHeaders: [\n        'id',\n        'title',\n        'seo_url',\n        'submitdate',\n        'budget_minimum',\n        'budget_maximum',\n        'currency_code',\n        'currency_exchange_rate',\n        'bid_stats_bid_count',\n        'bid_stats_bid_avg',\n        'budget_maximum_usd',\n        'budget_minimum_usd',\n        'description',\n        'proposal'\n      ],\n    };\n  },\n  methods: {\n    async fetchProjects() {\n      try {\n        this.loading = true; // Set loading state to true\n        const response = await axios.get(`${this.backendUrl}/search_projects`, {\n          params: {\n            query: this.query,\n          },\n        });\n\n        this.projects = response.data;\n\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        this.loading = false; // Set loading state to false\n      }\n    },\n    previewBid() {\n      if (this.selectedProjects.length === 0) {\n        this.preview = 'No projects selected.';\n        return;\n      }\n\n      this.preview = {};\n\n      this.selectedProjects.forEach((projectId) => {\n        const project = this.projects.find((p) => p.id === projectId);\n        const bidAmount = this.bidAmounts[projectId] || 'Not specified';\n\n        this.projectHeaders.forEach((header) => {\n          this.preview[header] = project[header] || 'Not available';\n        });\n\n        this.preview.bidAmount = bidAmount;\n      });\n    },\n    submitBid() {\n      console.log('Submitting bids:', this.selectedProjects, this.bidAmounts);\n\n      // You can add logic here to send bid details to the backend\n    },\n  },\n};\n</script>\n\n<style scoped>\n  /* Spinner container style */\n.spinner-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Spinner style */\n.spinner {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-left-color: #3498db; /* Blue */\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n  /* Container style */\n  div {\n    font-family: 'Arial', sans-serif;\n    margin: 20px;\n    text-align: center;\n  }\n/* Preview container style */\n.preview-container {\n    border: 1px solid #ddd;\n    padding: 10px;\n    margin-top: 20px;\n}\n  h1 {\n    color: #4CAF50;\n  }\n\n  /* Input and button style */\n  label,\n  input,\n  button {\n    margin: 5px;\n  }\n\n  /* Table style */\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n  }\n\n  th,\n  td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n  }\n\n  th {\n    background-color: #f2f2f2;\n  }\n  /* Checkbox and bid amount input style */\n  input[type=\"checkbox\"],\n  input[type=\"number\"] {\n    margin: 0;\n  }\n\n  /* Button container style */\n  div > div {\n    margin-top: 10px;\n  }\n\n  /* Preview and Submit button style */\n  button {\n    padding: 10px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n\n  button:hover {\n    background-color: #45a049;\n  }\n\n  /* Display Preview style */\n  h2 {\n    color: #4CAF50;\n  }\n\n  p {\n    margin-top: 10px;\n  }\n</style>"],"mappings":"AA4EA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE,EAAE;MACZC,gBAAgB,EAAE,EAAE;MACpBC,UAAU,EAAE,CAAC,CAAC;MACdC,OAAO,EAAE,KAAK;MAAE;MAChBC,UAAU,EAAE,uBAAuB;MACnCC,OAAO,EAAE,IAAI;MACbC,cAAc,EAAE,CACd,IAAI,EACJ,OAAO,EACP,SAAS,EACT,YAAY,EACZ,gBAAgB,EAChB,gBAAgB,EAChB,eAAe,EACf,wBAAwB,EACxB,qBAAqB,EACrB,mBAAmB,EACnB,oBAAoB,EACpB,oBAAoB,EACpB,aAAa,EACb,UAAS;IAEb,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,IAAI,CAACL,OAAM,GAAI,IAAI,EAAE;QACrB,MAAMM,QAAO,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAE,GAAE,IAAI,CAACN,UAAW,kBAAiB,EAAE;UACrEO,MAAM,EAAE;YACNb,KAAK,EAAE,IAAI,CAACA;UACd;QACF,CAAC,CAAC;QAEF,IAAI,CAACE,QAAO,GAAIS,QAAQ,CAACZ,IAAI;MAE/B,EAAE,OAAOe,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,UAAU;QACR,IAAI,CAACT,OAAM,GAAI,KAAK,EAAE;MACxB;IACF,CAAC;IACDW,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACb,gBAAgB,CAACc,MAAK,KAAM,CAAC,EAAE;QACtC,IAAI,CAACV,OAAM,GAAI,uBAAuB;QACtC;MACF;MAEA,IAAI,CAACA,OAAM,GAAI,CAAC,CAAC;MAEjB,IAAI,CAACJ,gBAAgB,CAACe,OAAO,CAAEC,SAAS,IAAK;QAC3C,MAAMC,OAAM,GAAI,IAAI,CAAClB,QAAQ,CAACmB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAC,KAAMJ,SAAS,CAAC;QAC7D,MAAMK,SAAQ,GAAI,IAAI,CAACpB,UAAU,CAACe,SAAS,KAAK,eAAe;QAE/D,IAAI,CAACX,cAAc,CAACU,OAAO,CAAEO,MAAM,IAAK;UACtC,IAAI,CAAClB,OAAO,CAACkB,MAAM,IAAIL,OAAO,CAACK,MAAM,KAAK,eAAe;QAC3D,CAAC,CAAC;QAEF,IAAI,CAAClB,OAAO,CAACiB,SAAQ,GAAIA,SAAS;MACpC,CAAC,CAAC;IACJ,CAAC;IACDE,SAASA,CAAA,EAAG;MACVX,OAAO,CAACY,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACxB,gBAAgB,EAAE,IAAI,CAACC,UAAU,CAAC;;MAEvE;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}