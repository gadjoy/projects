{"ast":null,"code":"export default {\n  data() {\n    return {\n      question: null,\n      answer: \"\",\n      feedback: \"\"\n    };\n  },\n  mounted() {\n    // Fetch initial question\n    this.generateQuestion();\n  },\n  methods: {\n    async generateQuestion() {\n      try {\n        const response = await fetch(\" http://127.0.0.1:5000/generate_question\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            operation: \"addition\"\n          })\n        });\n        const data = await response.json();\n        this.question = data.question;\n      } catch (error) {\n        console.error(\"Error fetching question:\", error);\n      }\n    },\n    async submitAnswer() {\n      try {\n        const response = await fetch(\"/check_answer\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            answer: this.answer\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to submit answer. Server returned ${response.status}`);\n        }\n        const data = await response.json();\n        if (data && data.feedback) {\n          this.feedback = data.feedback;\n          if (this.feedback.includes(\"Correct!\")) {\n            this.generateQuestion();\n          }\n        } else {\n          throw new Error(\"Invalid response format from server\");\n        }\n      } catch (error) {\n        console.error(\"Error submitting answer:\", error.message);\n        this.feedback = \"Failed to submit answer. Please try again.\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","question","answer","feedback","mounted","generateQuestion","methods","response","fetch","method","headers","body","JSON","stringify","operation","json","error","console","submitAnswer","ok","Error","status","includes","message"],"sources":["/home/waseem/project/freelancer_bidding_automation/client-/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Quiz Generator</h1>\n    <div v-if=\"question\">\n      <p>{{ question }}</p>\n      <input type=\"text\" v-model=\"answer\" placeholder=\"Your answer\" />\n      <button @click=\"submitAnswer\">Submit</button>\n      <p>{{ feedback }}</p>\n    </div>\n    <div v-else>\n      <p>Loading...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      question: null,\n      answer: \"\",\n      feedback: \"\"\n    };\n  },\n  mounted() {\n    // Fetch initial question\n    this.generateQuestion();\n  },\n  methods: {\n    async generateQuestion() {\n      try {\n        const response = await fetch(\" http://127.0.0.1:5000/generate_question\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            operation: \"addition\"\n          })\n        });\n        const data = await response.json();\n        this.question = data.question;\n      } catch (error) {\n        console.error(\"Error fetching question:\", error);\n      }\n    },\n    async submitAnswer() {\n      try {\n        const response = await fetch(\"/check_answer\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            answer: this.answer\n          })\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to submit answer. Server returned ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        if (data && data.feedback) {\n          this.feedback = data.feedback;\n          if (this.feedback.includes(\"Correct!\")) {\n            this.generateQuestion();\n          }\n        } else {\n          throw new Error(\"Invalid response format from server\");\n        }\n      } catch (error) {\n        console.error(\"Error submitting answer:\", error.message);\n        this.feedback = \"Failed to submit answer. Please try again.\";\n      }\n    }\n  }\n};\n</script>\n"],"mappings":"AAgBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,0CAA0C,EAAE;UACvEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,SAAS,EAAE;UACb,CAAC;QACH,CAAC,CAAC;QACF,MAAMd,IAAG,GAAI,MAAMO,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClC,IAAI,CAACd,QAAO,GAAID,IAAI,CAACC,QAAQ;MAC/B,EAAE,OAAOe,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACD,MAAME,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMX,QAAO,GAAI,MAAMC,KAAK,CAAC,eAAe,EAAE;UAC5CC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBX,MAAM,EAAE,IAAI,CAACA;UACf,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACK,QAAQ,CAACY,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,4CAA2Cb,QAAQ,CAACc,MAAO,EAAC,CAAC;QAChF;QAEA,MAAMrB,IAAG,GAAI,MAAMO,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAElC,IAAIf,IAAG,IAAKA,IAAI,CAACG,QAAQ,EAAE;UACzB,IAAI,CAACA,QAAO,GAAIH,IAAI,CAACG,QAAQ;UAC7B,IAAI,IAAI,CAACA,QAAQ,CAACmB,QAAQ,CAAC,UAAU,CAAC,EAAE;YACtC,IAAI,CAACjB,gBAAgB,CAAC,CAAC;UACzB;QACF,OAAO;UACL,MAAM,IAAIe,KAAK,CAAC,qCAAqC,CAAC;QACxD;MACF,EAAE,OAAOJ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACO,OAAO,CAAC;QACxD,IAAI,CAACpB,QAAO,GAAI,4CAA4C;MAC9D;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}