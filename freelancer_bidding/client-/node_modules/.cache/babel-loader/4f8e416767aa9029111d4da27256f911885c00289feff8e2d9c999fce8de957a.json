{"ast":null,"code":"import showdown from 'showdown';\nexport default {\n  data() {\n    return {\n      textInput: \"\",\n      generatedContent: [],\n      errorMessage: \"\",\n      testCaseType: \"\",\n      errorType: \"\",\n      markdownOutput: \"\"\n    };\n  },\n  methods: {\n    async generateContent() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/generate_content', {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            text: this.textInput,\n            testCaseType: this.testCaseType,\n            errorType: this.errorType\n          })\n        });\n        const responseData = await response.json();\n        if (response.ok) {\n          console.log(responseData);\n          this.markdownOutput = this.converter.makeHtml(responseData.generated_content);\n          this.generatedContent = responseData.generated_content.split('\\n');\n          this.errorMessage = \"\";\n        } else {\n          this.generatedContent = [];\n          this.errorMessage = responseData.message || \"Failed to generate content.\";\n        }\n      } catch (error) {\n        console.error(\"Error generating content:\", error);\n        this.generatedContent = [];\n        this.errorMessage = \"An error occurred while generating content.\";\n      }\n    }\n  },\n  mounted() {\n    this.converter = new showdown.Converter();\n  }\n};","map":{"version":3,"names":["showdown","data","textInput","generatedContent","errorMessage","testCaseType","errorType","markdownOutput","methods","generateContent","response","fetch","method","headers","body","JSON","stringify","text","responseData","json","ok","console","log","converter","makeHtml","generated_content","split","message","error","mounted","Converter"],"sources":["/home/waseem/project/chatbot/client-/src/App.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n      <div class=\"chat-heading\">\n        <h2>CHAT TESTER</h2>\n      </div>\n  \n      <div class=\"input-section\">\n        <textarea v-model=\"textInput\" placeholder=\"Enter text\" class=\"input-textarea\" rows=\"5\"></textarea>\n      </div>\n  \n      <div class=\"test-case-selection\">\n        <label for=\"test-case-type\">Test Case Type:</label>\n        <select v-model=\"testCaseType\" id=\"test-case-type\">\n          <option value=\"Type A\">Type A</option>\n          <option value=\"Type B\">Type B</option>\n          <!-- Add more options as needed -->\n        </select>\n      </div>\n  \n      <div class=\"error-classification\">\n        <label for=\"error-type\">Error Classification:</label>\n        <select v-model=\"errorType\" id=\"error-type\">\n          <option value=\"Syntax Error\">Syntax Error</option>\n          <option value=\"Runtime Error\">Runtime Error</option>\n          <!-- Add more options as needed -->\n        </select>\n      </div>\n  \n      <div class=\"generate-section\">\n        <button @click=\"generateContent\" class=\"generate-button\">Generate</button>\n      </div>\n  \n      <!-- <div v-if=\"generatedContent || errorMessage\" class=\"result-section\">\n        <div class=\"generated-content-box\" v-if=\"generatedContent\">\n          <h3>OUTPUT</h3>\n          <ul>\n            <li v-for=\"(point, index) in generatedContent\" :key=\"index\">\n              <span :class=\"{ 'bigger-font': point.startsWith('*') }\">{{ point }}</span>\n            </li>\n          </ul>\n        </div>\n        <div v-if=\"errorMessage\" class=\"error-section\">\n          <p>Error: {{ errorMessage }}</p>\n        </div>\n      </div> -->\n      <div v-html=\"markdownOutput\"> </div>\n    </div>\n  </template>\n  \n  <script>\n\n  import showdown from 'showdown';\n\n  export default {\n    data() {\n      return {\n        textInput: \"\",\n        generatedContent: [],\n        errorMessage: \"\",\n        testCaseType: \"\",\n        errorType: \"\",\n        markdownOutput: \"\",\n      };\n    },\n    methods: {\n      async generateContent() {\n        try {\n          const response = await fetch('http://127.0.0.1:5000/generate_content', {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({ \n              text: this.textInput,\n              testCaseType: this.testCaseType,\n              errorType: this.errorType\n            })\n          });\n  \n          const responseData = await response.json();\n  \n          if (response.ok) {\n            console.log(responseData)\n            \n            this.markdownOutput = this.converter.makeHtml(responseData.generated_content)\n            \n            this.generatedContent = responseData.generated_content.split('\\n');\n            this.errorMessage = \"\";\n          } else {\n            this.generatedContent = [];\n            this.errorMessage = responseData.message || \"Failed to generate content.\";\n          }\n        } catch (error) {\n          console.error(\"Error generating content:\", error);\n          this.generatedContent = [];\n          this.errorMessage = \"An error occurred while generating content.\";\n        }\n      }\n    },\n    mounted() {\n      this.converter = new showdown.Converter();\n    }\n  };\n  </script>\n  \n  <style>\n  .container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    font-family: sans-serif;\n    background-color:whitesmoke; /* Changed background color to light grey */\n    padding: 2rem;\n  }\n  \n  .chat-heading {\n    margin-top: 20px;\n    text-align: center;\n  }\n  \n  h2 {\n    font-size: 28px;\n    color: #449D44;\n  }\n  \n  .input-section,\n  .test-case-selection,\n  .error-classification,\n  .generate-section {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    margin-top: 20px;\n    margin-bottom: 20px;\n    width: 100%;\n    height: 250px;\n  }\n  \n  .input-textarea {\n    flex: 1;\n    width: 1500px;\n    min-height: 100px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    resize: horizontal;\n    margin-right: 10px;\n  }\n  \n  .test-case-selection label,\n  .error-classification label {\n    margin-bottom: 5px; /* Adjusted for better spacing */\n  }\n  \n  .test-case-selection select,\n  .error-classification select {\n    width: 600px;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n  }\n  \n  .generate-button {\n    margin-top: 10px; /* Adjusted for better spacing */\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: #fff;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n  \n  .generate-button:hover {\n    background-color: #0056b3;\n  }\n  \n  .result-section,\n  .error-section {\n    text-align: center;\n    max-width: 80%;\n    margin-bottom: 20px;\n  }\n  \n  .generated-content-box {\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    background-color: #f9f9f9;\n    width: 1500px; /* Same width as input textarea */\n    max-width: 100%;\n    min-height: 100%;\n    margin: 20px auto; /* Center horizontally and vertically */\n    text-align: left; /* Align text to start from the left */\n  }\n  \n  .bold {\n    font-weight: bo;\n  }\n  \n  p {\n    font-size: 18px;\n    color: #333;\n  }\n  \n  .bigger-font{\n    font-size: 20px;\n  }\n  </style>\n  "],"mappings":"AAmDE,OAAOA,QAAO,MAAO,UAAU;AAE/B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,gBAAgB,EAAE,EAAE;MACpBC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE,EAAE;MAChBC,SAAS,EAAE,EAAE;MACbC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,wCAAwC,EAAE;UACrEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,IAAI,EAAE,IAAI,CAACf,SAAS;YACpBG,YAAY,EAAE,IAAI,CAACA,YAAY;YAC/BC,SAAS,EAAE,IAAI,CAACA;UAClB,CAAC;QACH,CAAC,CAAC;QAEF,MAAMY,YAAW,GAAI,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAE1C,IAAIT,QAAQ,CAACU,EAAE,EAAE;UACfC,OAAO,CAACC,GAAG,CAACJ,YAAY;UAExB,IAAI,CAACX,cAAa,GAAI,IAAI,CAACgB,SAAS,CAACC,QAAQ,CAACN,YAAY,CAACO,iBAAiB;UAE5E,IAAI,CAACtB,gBAAe,GAAIe,YAAY,CAACO,iBAAiB,CAACC,KAAK,CAAC,IAAI,CAAC;UAClE,IAAI,CAACtB,YAAW,GAAI,EAAE;QACxB,OAAO;UACL,IAAI,CAACD,gBAAe,GAAI,EAAE;UAC1B,IAAI,CAACC,YAAW,GAAIc,YAAY,CAACS,OAAM,IAAK,6BAA6B;QAC3E;MACF,EAAE,OAAOC,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,IAAI,CAACzB,gBAAe,GAAI,EAAE;QAC1B,IAAI,CAACC,YAAW,GAAI,6CAA6C;MACnE;IACF;EACF,CAAC;EACDyB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACN,SAAQ,GAAI,IAAIvB,QAAQ,CAAC8B,SAAS,CAAC,CAAC;EAC3C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}