{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      query: '',\n      searchLimit: '',\n      projects: [],\n      // Initialize projects as an empty array\n      selectedProjects: [],\n      bidAmounts: {},\n      projectHeaders: ['id', 'title', 'seo_url', 'submitdate', 'budget_minimum', 'budget_maximum', 'currency_code', 'currency_exchange_rate', 'bid_stats_bid_count', 'bid_stats_bid_avg'],\n      // Modify with your actual headers\n      loading: false,\n      projectsLoaded: false\n    };\n  },\n  methods: {\n    async fetchProjects() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`http://127.0.0.1:5000/search_projects`, {\n          params: {\n            query: this.query,\n            limit: this.searchLimit\n          },\n          withCredentials: true\n        });\n        this.projects = response.data.projects_with_proposals;\n        this.projectsLoaded = true;\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    previewBid() {\n      if (this.selectedProjects.length === 0) {\n        this.preview = 'No projects selected.';\n        return;\n      }\n      this.preview = {};\n      this.selectedProjects.forEach(projectId => {\n        const project = this.projects.find(p => p._id === projectId);\n        const bidAmount = this.bidAmounts[projectId] || 'Not specified';\n        this.projectHeaders.forEach(header => {\n          this.preview[header] = project[header] || 'Not available';\n        });\n        this.preview.bidAmount = bidAmount;\n      });\n    },\n    submitBid() {\n      console.log('Submitting bids:', this.selectedProjects, this.bidAmounts);\n\n      // You can add logic here to send bid details to the backend\n    }\n  }\n};","map":{"version":3,"names":["axios","data","query","searchLimit","projects","selectedProjects","bidAmounts","projectHeaders","loading","projectsLoaded","methods","fetchProjects","response","get","params","limit","withCredentials","projects_with_proposals","error","console","previewBid","length","preview","forEach","projectId","project","find","p","_id","bidAmount","header","submitBid","log"],"sources":["/home/waseem/project/freelancer_bidding_automation/client-/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>FREELANCER AUTO BIDDING</h1>\n\n    <div>\n      <label for=\"query\">Query:</label>\n      <input v-model=\"query\" type=\"text\" id=\"query\" />\n      <label for=\"searchLimit\">Search Limit:</label>\n      <input v-model.number=\"searchLimit\" type=\"number\" id=\"searchLimit\" />\n      <button @click=\"fetchProjects\" :disabled=\"loading\">Search</button>\n      <div v-if=\"loading\">Loading projects...</div>\n    </div>\n\n    <div v-if=\"projectsLoaded && projects.length > 0\">\n      <table>\n        <thead>\n          <tr>\n            <th>Select</th>\n            <th v-for=\"header in projectHeaders\" :key=\"header\">{{ header }}</th>\n            <th>Bid Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"project in projects\" :key=\"project._id\">\n            <td>\n              <input type=\"checkbox\" v-model=\"selectedProjects\" :value=\"project._id\" />\n            </td>\n            <td v-for=\"header in projectHeaders\" :key=\"header\">\n              {{ header !== '_proposal' ? project[header] || 'Not available' : '' }}\n            </td>\n            <td>\n              <input v-model=\"bidAmounts[project._id]\" type=\"number\" />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div>\n        <button @click=\"previewBid\">Preview</button>\n        <button @click=\"submitBid\">Submit</button>\n      </div>\n\n      <!-- Display Preview -->\n      <div v-if=\"preview\">\n        <h2>Preview:</h2>\n        <div v-for=\"(header, index) in projectHeaders\" :key=\"index\">\n          <p v-if=\"header !== '_proposal'\">{{ header === '_full_description' ? 'Title' : header }}: {{ preview[header] || 'Not available' }}</p>\n        </div>\n        <p>Bid Amount: {{ preview.bidAmount || 'Not specified' }}</p>\n      </div>\n    </div>\n\n    <div v-if=\"projectsLoaded && projects.length === 0\">\n      No projects found.\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      query: '',\n      searchLimit: '',\n      projects: [], // Initialize projects as an empty array\n      selectedProjects: [],\n      bidAmounts: {},\n      projectHeaders: ['id', 'title', 'seo_url', 'submitdate', 'budget_minimum', 'budget_maximum', 'currency_code', 'currency_exchange_rate', 'bid_stats_bid_count', 'bid_stats_bid_avg'], // Modify with your actual headers\n      loading: false,\n      projectsLoaded: false\n    };\n  },\n  methods: {\n    async fetchProjects() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`http://127.0.0.1:5000/search_projects`, {\n          params: {\n            query: this.query,\n            limit: this.searchLimit,\n          },\n          withCredentials: true,\n        });\n\n        this.projects = response.data.projects_with_proposals;\n        this.projectsLoaded = true;\n\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    previewBid() {\n      if (this.selectedProjects.length === 0) {\n        this.preview = 'No projects selected.';\n        return;\n      }\n\n      this.preview = {};\n\n      this.selectedProjects.forEach((projectId) => {\n        const project = this.projects.find((p) => p._id === projectId);\n        const bidAmount = this.bidAmounts[projectId] || 'Not specified';\n\n        this.projectHeaders.forEach((header) => {\n          this.preview[header] = project[header] || 'Not available';\n        });\n\n        this.preview.bidAmount = bidAmount;\n      });\n    },\n    submitBid() {\n      console.log('Submitting bids:', this.selectedProjects, this.bidAmounts);\n\n      // You can add logic here to send bid details to the backend\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n/* Your styles */\n</style>\n"],"mappings":"AA2DA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE,EAAE;MAAE;MACdC,gBAAgB,EAAE,EAAE;MACpBC,UAAU,EAAE,CAAC,CAAC;MACdC,cAAc,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,eAAe,EAAE,wBAAwB,EAAE,qBAAqB,EAAE,mBAAmB,CAAC;MAAE;MACrLC,OAAO,EAAE,KAAK;MACdC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,IAAI,CAACH,OAAM,GAAI,IAAI;QACnB,MAAMI,QAAO,GAAI,MAAMZ,KAAK,CAACa,GAAG,CAAE,uCAAsC,EAAE;UACxEC,MAAM,EAAE;YACNZ,KAAK,EAAE,IAAI,CAACA,KAAK;YACjBa,KAAK,EAAE,IAAI,CAACZ;UACd,CAAC;UACDa,eAAe,EAAE;QACnB,CAAC,CAAC;QAEF,IAAI,CAACZ,QAAO,GAAIQ,QAAQ,CAACX,IAAI,CAACgB,uBAAuB;QACrD,IAAI,CAACR,cAAa,GAAI,IAAI;MAE5B,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,UAAU;QACR,IAAI,CAACV,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IACDY,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACf,gBAAgB,CAACgB,MAAK,KAAM,CAAC,EAAE;QACtC,IAAI,CAACC,OAAM,GAAI,uBAAuB;QACtC;MACF;MAEA,IAAI,CAACA,OAAM,GAAI,CAAC,CAAC;MAEjB,IAAI,CAACjB,gBAAgB,CAACkB,OAAO,CAAEC,SAAS,IAAK;QAC3C,MAAMC,OAAM,GAAI,IAAI,CAACrB,QAAQ,CAACsB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAE,KAAMJ,SAAS,CAAC;QAC9D,MAAMK,SAAQ,GAAI,IAAI,CAACvB,UAAU,CAACkB,SAAS,KAAK,eAAe;QAE/D,IAAI,CAACjB,cAAc,CAACgB,OAAO,CAAEO,MAAM,IAAK;UACtC,IAAI,CAACR,OAAO,CAACQ,MAAM,IAAIL,OAAO,CAACK,MAAM,KAAK,eAAe;QAC3D,CAAC,CAAC;QAEF,IAAI,CAACR,OAAO,CAACO,SAAQ,GAAIA,SAAS;MACpC,CAAC,CAAC;IACJ,CAAC;IACDE,SAASA,CAAA,EAAG;MACVZ,OAAO,CAACa,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC3B,gBAAgB,EAAE,IAAI,CAACC,UAAU,CAAC;;MAEvE;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}