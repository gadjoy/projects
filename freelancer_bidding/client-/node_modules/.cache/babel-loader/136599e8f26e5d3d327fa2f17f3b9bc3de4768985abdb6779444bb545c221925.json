{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      query: '',\n      projects: [],\n      selectedProjects: [],\n      bidAmounts: {},\n      loading: false,\n      backendUrl: 'http://127.0.0.1:5000',\n      preview: null,\n      projectHeaders: ['id', 'title', 'seo_url', 'submitdate', 'budget_minimum', 'budget_maximum', 'currency_code', 'currency_exchange_rate', 'bid_stats_bid_count', 'bid_stats_bid_avg', 'budget_maximum_usd', 'budget_minimum_usd', 'description', 'proposal'],\n      expandedDescriptions: {},\n      bidAmount: null,\n      proposal: null\n    };\n  },\n  methods: {\n    async fetchProjects() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${this.backendUrl}/search_projects`, {\n          params: {\n            query: this.query\n          }\n        });\n        this.projects = response.data;\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    previewBid() {\n      if (this.selectedProjects.length === 0) {\n        this.preview = 'No projects selected.';\n        return;\n      }\n      this.preview = {};\n      this.selectedProjects.forEach(projectId => {\n        const project = this.projects.find(p => p.id === projectId);\n        const bidAmount = this.bidAmounts[projectId] || 'Not specified';\n        this.projectHeaders.forEach(header => {\n          this.preview[header] = project[header] || 'Not available';\n        });\n        this.preview.bidAmount = bidAmount;\n      });\n    },\n    async generateProposal() {\n      try {\n        const response = await axios.get(`${this.backendUrl}/generate_proposal`, {\n          params: {\n            id: this.selectedProjects[0]\n          }\n        });\n        this.proposal = response.data;\n      } catch (error) {\n        console.error('Error generating proposal:', error);\n      }\n    },\n    async submitBid() {\n      try {\n        const response = await axios.post(`${this.backendUrl}/place_bid`, {\n          project_id: this.selectedProjects[0],\n          amount: this.bidAmount,\n          proposal: this.proposal\n        });\n        console.log('Bid placed successfully:', response.data);\n        // You can handle further actions like displaying a success message, updating UI, etc.\n      } catch (error) {\n        console.error('Error placing bid:', error);\n      }\n    },\n    toggleDescription(projectId) {\n      this.expandedDescriptions[projectId] = !this.expandedDescriptions[projectId];\n    }\n  }\n};","map":{"version":3,"names":["axios","data","query","projects","selectedProjects","bidAmounts","loading","backendUrl","preview","projectHeaders","expandedDescriptions","bidAmount","proposal","methods","fetchProjects","response","get","params","error","console","previewBid","length","forEach","projectId","project","find","p","id","header","generateProposal","submitBid","post","project_id","amount","log","toggleDescription"],"sources":["/home/waseem/project/freelancer_bidding_automation/client-/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>FREELANCER AUTO BIDDING</h1>\n\n    <div>\n      <label for=\"query\">Query:</label>\n      <input v-model=\"query\" type=\"text\" id=\"query\" />\n      <button @click=\"fetchProjects\" :disabled=\"loading\">Search</button>\n\n      <div v-if=\"loading\" class=\"spinner-container\">\n        <div class=\"spinner\"></div>\n      </div>\n    </div>\n\n    <div v-if=\"!loading && projects.length > 0\">\n      <table>\n        <!-- Table headers -->\n        <thead>\n          <tr>\n            <th>Select</th>\n            <th v-for=\"header in projectHeaders\" :key=\"header\">{{ header }}</th>\n            <th>Bid Amount</th>\n          </tr>\n        </thead>\n        <!-- Table body -->\n        <tbody>\n          <tr v-for=\"project in projects\" :key=\"project.id\">\n            <!-- Checkbox for selection -->\n            <td>\n              <input type=\"checkbox\" v-model=\"selectedProjects\" :value=\"project.id\" />\n            </td>\n            <!-- Display project data -->\n            <td v-for=\"header in projectHeaders\" :key=\"header\">\n              <template v-if=\"header === 'description'\">\n                <div class=\"description-cell\" :class=\"{ 'expanded': expandedDescriptions[project.id] }\">\n                  <div v-if=\"!expandedDescriptions[project.id]\" class=\"description-preview\">{{ project[header] || 'Not available' }}</div>\n                  <div v-else>{{ project[header] || 'Not available' }}</div>\n                  <button @click=\"toggleDescription(project.id)\" class=\"read-more-btn\">\n                    {{ expandedDescriptions[project.id] ? 'Read Less' : 'Read More' }}\n                  </button>\n                </div>\n              </template>\n              <template v-else>\n                {{ project[header] || 'Not available' }}\n              </template>\n            </td>\n            <!-- Input for bid amount -->\n            <td>\n              <input v-model=\"bidAmounts[project.id]\" type=\"number\" />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <!-- Buttons for preview and submit -->\n      <div>\n        <button @click=\"previewBid\">Preview</button>\n        <button @click=\"submitBid\">Submit</button>\n      </div>\n\n      <!-- Display Preview -->\n      <div v-if=\"preview\" class=\"preview-container\">\n        <h2>Preview:</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Key</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(value, key) in preview\" :key=\"key\">\n              <td>{{ key }}</td>\n              <td>{{ value || 'Not available' }}</td>\n            </tr>\n          </tbody>\n        </table>\n        <!-- Input for bid amount -->\n        <div>\n          <label for=\"bidAmount\">Bid Amount:</label>\n          <input v-model=\"bidAmount\" type=\"number\" id=\"bidAmount\" />\n        </div>\n        <!-- Button to generate proposal -->\n        <button @click=\"generateProposal\">Generate Proposal</button>\n        <!-- Confirmation button -->\n        <button @click=\"confirmBid\">Confirm</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      query: '',\n      projects: [],\n      selectedProjects: [],\n      bidAmounts: {},\n      loading: false,\n      backendUrl: 'http://127.0.0.1:5000',\n      preview: null,\n      projectHeaders: [\n        'id',\n        'title',\n        'seo_url',\n        'submitdate',\n        'budget_minimum',\n        'budget_maximum',\n        'currency_code',\n        'currency_exchange_rate',\n        'bid_stats_bid_count',\n        'bid_stats_bid_avg',\n        'budget_maximum_usd',\n        'budget_minimum_usd',\n        'description',\n        'proposal'\n      ],\n      expandedDescriptions: {},\n      bidAmount: null,\n      proposal: null,\n    };\n  },\n  methods: {\n    async fetchProjects() {\n      try {\n        this.loading = true;\n        const response = await axios.get(`${this.backendUrl}/search_projects`, {\n          params: {\n            query: this.query,\n          },\n        });\n\n        this.projects = response.data;\n\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    previewBid() {\n      if (this.selectedProjects.length === 0) {\n        this.preview = 'No projects selected.';\n        return;\n      }\n\n      this.preview = {};\n\n      this.selectedProjects.forEach((projectId) => {\n        const project = this.projects.find((p) => p.id === projectId);\n        const bidAmount = this.bidAmounts[projectId] || 'Not specified';\n\n        this.projectHeaders.forEach((header) => {\n          this.preview[header] = project[header] || 'Not available';\n        });\n\n        this.preview.bidAmount = bidAmount;\n      });\n    },\n    async generateProposal() {\n      try {\n        const response = await axios.get(`${this.backendUrl}/generate_proposal`, {\n          params: {\n            id: this.selectedProjects[0],\n          },\n        });\n\n        this.proposal = response.data;\n      } catch (error) {\n        console.error('Error generating proposal:', error);\n      }\n    },\n    async submitBid() {\n      try {\n        const response = await axios.post(`${this.backendUrl}/place_bid`, {\n          project_id: this.selectedProjects[0],\n          amount: this.bidAmount,\n          proposal: this.proposal,\n        });\n\n        console.log('Bid placed successfully:', response.data);\n        // You can handle further actions like displaying a success message, updating UI, etc.\n      } catch (error) {\n        console.error('Error placing bid:', error);\n      }\n    },\n    toggleDescription(projectId) {\n      this.expandedDescriptions[projectId] = !this.expandedDescriptions[projectId];\n    },\n  },\n};\n</script>\n\n<style scoped>\n  /* Spinner container style */\n.spinner-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Spinner style */\n.spinner {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-left-color: #3498db; /* Blue */\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n  /* Container style */\n  div {\n    font-family: 'Arial', sans-serif;\n    margin: 20px;\n    text-align: center;\n  }\n/* Preview container style */\n.preview-container {\n    border: 1px solid #ddd;\n    padding: 10px;\n    margin-top: 20px;\n}\n  h1 {\n    color: #4CAF50;\n  }\n\n  /* Input and button style */\n  label,\n  input,\n  button {\n    margin: 5px;\n  }\n\n  /* Table style */\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n  }\n\n  th,\n  td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n  }\n\n  th {\n    background-color: #f2f2f2;\n  }\n  /* Checkbox and bid amount input style */\n  input[type=\"checkbox\"],\n  input[type=\"number\"] {\n    margin: 0;\n  }\n\n  /* Button container style */\n  div > div {\n    margin-top: 10px;\n  }\n\n  .read-more-btn {\n    padding: 5px 8px; /* Adjust padding to make the button smaller */\n    font-size: 12px; /* Adjust font size to make the text smaller */\n  }\n\n  /* Preview and Submit button style */\n  button {\n    padding: 10px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n\n  button:hover {\n    background-color: #45a049;\n  }\n\n  /* Display Preview style */\n  h2 {\n    color: #4CAF50;\n  }\n\n  p {\n    margin-top: 10px;\n  }\n\n  /* Description cell style */\n  .description-cell {\n    max-height: 50px; /* Initial height */\n    overflow: hidden;\n    position: relative;\n  }\n\n  .description-preview {\n    margin-bottom: 5px;\n  }\n\n  .description-cell.expanded {\n    max-height: none; /* Expand on click */\n  }\n\n  .description-cell button {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n  }\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}