{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  id: \"chat-container\"\n};\nconst _hoisted_2 = {\n  id: \"chat-messages\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, _toDisplayString(message.sender) + \": \" + _toDisplayString(message.text), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userInput = $event),\n    placeholder: \"Type your message...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"Send\")]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","messages","message","index","key","_toDisplayString","sender","text","type","_cache","$event","userInput","placeholder","onClick","args","$options","sendMessage"],"sources":["/home/waseem/project/chatbot/client-/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"chat-container\">\n    <div id=\"chat-messages\">\n      <div v-for=\"(message, index) in messages\" :key=\"index\">\n        {{ message.sender }}: {{ message.text }}\n      </div>\n    </div>\n    <input type=\"text\" v-model=\"userInput\" placeholder=\"Type your message...\">\n    <button @click=\"sendMessage\">Send</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      userInput: '',\n      messages: []\n    };\n  },\n  methods: {\n    sendMessage() {\n      this.appendMessage('user', this.userInput);\n\n      fetch('/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: this.userInput\n        })\n      })\n      .then(response => response.json())\n      .then(data => {\n        this.appendMessage('bot', data.response);\n      });\n\n      this.userInput = ''; // Clear the input field after sending\n    },\n    appendMessage(sender, message) {\n      this.messages.push({ sender, text: message });\n    }\n  }\n};\n</script>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAgB;;EACjBA,EAAE,EAAC;AAAe;;uBADzBC,mBAAA,CAQM,OARNC,UAQM,GAPJC,mBAAA,CAIM,OAJNC,UAIM,I,kBAHJH,mBAAA,CAEMI,SAAA,QALZC,WAAA,CAGsCC,KAAA,CAAAC,QAAQ,EAH9C,CAGmBC,OAAO,EAAEC,KAAK;yBAA3BT,mBAAA,CAEM;MAFqCU,GAAG,EAAED;IAAK,GAAAE,gBAAA,CAChDH,OAAO,CAACI,MAAM,IAAG,IAAE,GAAAD,gBAAA,CAAGH,OAAO,CAACK,IAAI;oDAGzCX,mBAAA,CAA0E;IAAnEY,IAAI,EAAC,MAAM;IAPtB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOgCV,KAAA,CAAAW,SAAS,GAAAD,MAAA;IAAEE,WAAW,EAAC;iDAAvBZ,KAAA,CAAAW,SAAS,E,GACrCf,mBAAA,CAA0C;IAAjCiB,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,MAAI,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}